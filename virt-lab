#!/usr/bin/env python
#
# Copyright (c) 2019-2020 Sine Nomine Associates
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED 'AS IS' AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#-------------------------------------------------------------------------------
# pylint: disable=missing-docstring
# pylint: disable=attribute-defined-outside-init
# pylint: disable=global-statement
# pylint: disable=invalid-name
# pylint: disable=no-self-use
# pylint: disable=too-many-instance-attributes

from __future__ import print_function

import argparse
import os
import re
import sys
import string
import json
import glob

try:
    from configparser import ConfigParser    # Python3
    from configparser import NoSectionError
    from configparser import NoOptionError
except ImportError:
    from ConfigParser import SafeConfigParser as ConfigParser # Python2
    from ConfigParser import NoSectionError
    from ConfigParser import NoOptionError

try:
    string_type = basestring # Python2
except NameError:
    string_type = str # Python3

VERSION = 'v1.1.0'
VERBOSE = False
DRYRUN = False
DESC = 'Install and remove guests on a local kvm hypervisor using cloud-init images.'
USAGE = '''\
virt-lab <command> [<name>] [<options>]

Commands:
  create <name>     create guests (alias: new)
  destroy <name>    destroy guests (alias: rm)
  start <name>      start guests
  stop <name>       shutdown guests
  info <name>       show lab and guest status (alias: show)
  inventory <name>  generate ansible dynamic inventory
  list              list labs (alias: ls)
  help              show help
  version           show version
'''

VIRTDIR = os.path.expanduser('~/virt') # Same as kvm-install-vm.

def kiv_value(name):
    """Get the default bridge name from the kvm-install-vm config."""
    kivrc = os.path.expanduser('~/.kivrc')
    try:
        with open(kivrc, 'r') as f:
            for line in f:
                m = re.match(r'%s=(.*)' % name, line)
                if m:
                    return m.group(1).strip().replace('"','').replace("'",'')
    except:
        pass
    return None

def kvm_gateway():
    """Lookup the address of the bridge device."""
    bridge = kiv_value('BRIDGE') or 'virb0'
    cmdline = 'ip -oneline address show dev %s' % bridge
    pipe = os.popen(cmdline + ' 2>&1')
    if pipe:
        output = pipe.read()
        pipe.close()
        m = re.search(r'inet (\d+\.\d+\.\d+\.\d+)', output)
        if m:
            return m.group(1)
    return None

DEFAULTS = {
    'autostart': True,
    'bridge': kiv_value('BRIDGE') or 'virbr0',
    'cpus': None,
    'disksize': None,
    'distro': 'centos7',
    'domain': 'example.com',
    'feature': None,
    'gateway': kvm_gateway(),
    'graphics': None,
    'guests': '3',
    'imagedir': None,
    'image': None,
    'key': None,
    'mac': None,
    'memory': None,
    'namefmt': '{lab}{guest:02d}',
    'port': None,
    'scriptname': None,
    'timezone': None,
    'user': None,
    'vardir': VIRTDIR + '/vars',
    'vmdir': VIRTDIR + '/vms',
    'scriptdir': VIRTDIR + '/scripts',
    'playbookdir': VIRTDIR + '/playbooks',
}

PATHNAMES = ('key', 'imagedir', 'scriptname', 'vmdir', 'vardir',
             'scriptdir', 'playbookdir', 'postcreate', 'postdestroy',
             'poststart', 'poststop')

def trace(msg):
    if VERBOSE:
        sys.stdout.write('[trace]: %s\n' % msg)

def info(msg):
    sys.stdout.write('[info]: %s\n' % msg)

def warn(msg):
    sys.stdout.write('[warn]: %s\n' % msg)

def error(msg):
    sys.stderr.write('[error]: %s\n' % msg)

def die(msg):
    sys.stderr.write('[fatal]: %s\n' % msg)
    sys.exit(1)

def mkdirp(path):
    if not os.path.exists(path):
        os.makedirs(path)

def shellquote(s):
    """Return a shell-escaped string."""
    s = str(s)
    if not s:
        return "''"
    m = re.search(r'[^a-zA-Z0-9_:\-\./]', s)
    if m:
        s = "'" + s.replace("'", "'\"'\"'") + "'"
    return s

def run(args):
    """Run a command."""
    if isinstance(args, (list, tuple)):
        cmdline = ' '.join([shellquote(a) for a in args])
    else:
        cmdline = str(args)
    if DRYRUN:
        trace('Skipping: %s' % cmdline)
        return 0
    trace('Running: %s' % cmdline)
    rc = os.system(cmdline)
    return rc

def parse_sequence(s):
    """Parse a string containing a sequence of numbers, ignoring
    white space and expanding ranges in the form of <a>..<b>.

    Examples:
       ''       -> []
       '1'      -> [1]
       '1,2,3'  -> [1, 2, 3]
       '1..3'   -> [1, 2, 3]
       '1,2..3' -> [1, 2, 3]
       '2,2'    -> [2]
    """
    seq = []
    for f in s.split(','):
        f = f.strip()
        if not f:
            continue
        m = re.match(r'(\d+)$', f)
        if m:
            seq.append(int(m.group(1)))
            continue
        m = re.match(r'(\d+)\s*(\.\.|:|-)\s*(\d+)$', f)
        if m:
            a = int(m.group(1))
            b = int(m.group(3))
            if a <= b:
                seq.extend(list(range(a, b+1)))
                continue
        raise ValueError('Invalid sequence value: "%s"' % f)
    return sorted(set(seq))

def flatten(lol):
    """Flatten a list of lists.
    Example:
        flatten([['a'], ['b', 'c']]) => ['a', 'b', 'c']
    """
    f = []
    for x in lol:
        if isinstance(x, list):
            f.extend(flatten(x))
        else:
            f.append(x)
    return f

def option_arg(value):
    n, v = value.split('=', 1)
    return n.strip(), v.strip()

class VirshError(Exception):
    pass

def virsh(command, *options):
    args = ['virsh', command]
    args.extend(list(options))
    cmdline = ' '.join([shellquote(a) for a in args])
    pipe = os.popen(cmdline + ' 2>&1')
    if not pipe:
        raise VirshError('Failed to run command: %s' % cmdline)
    output = pipe.read()
    rc = pipe.close()
    if rc is not None and rc != 0:
        raise VirshError('Error while running command: %s, rc=%d' % (cmdline, rc))
    return output


class Formatter(string.Formatter):
    def __init__(self, lab):
        self.lab = lab

    def get_value(self, key, args, kwargs):
        return self.lab.get(key)

class Variables(object):
    def __init__(self, path):
        self.path = path
        self.vars = {}
        self.load()

    def load(self):
        if os.path.exists(self.path):
            with open(self.path) as f:
                self.vars = json.load(f)

    def save(self):
        mkdirp(os.path.dirname(self.path))
        with open(self.path, 'w') as f:
            json.dump(self.vars, f)

    def remove(self):
        if os.path.exists(self.path):
            os.unlink(self.path)

    def get(self, name, default=None):
        return self.vars.get(name, default)

    def set(self, name, value):
        self.vars[name] = value
        self.save()

class Lab(object):

    def __init__(self, name, args, config):
        m = re.search(r'[^a-zA-Z0-9_\-]', name)
        if m:
            die('Invalid character "%s" in lab name "%s".' % (m.group(), name))
        self.name = name
        self.values = {}
        self.args = args
        self.config = config
        self.vars = Variables(os.path.join(self.vardir, 'labs', self.name + '.json'))

    def setenv(self):
        """Set env variables for external commands."""
        for name, value in self.get_values().items():
            for prefix in ('group', 'var'):
                if name.startswith(prefix+'.'):
                    name = name.replace(prefix+'.', prefix+'_', 1)
            if isinstance(value, string_type):
                if name != 'namefmt': # Do not expand this format string.
                    value = self.expand_string(value)
            os.environ['VIRTLAB_' + name.upper()] = str(value) if value else ''

    def guests(self):
        nguests = int(self.get('guests'))
        for number in range(1, nguests+1):
            yield Guest(self, number)

    def __getattr__(self, name):
        value = self.get(name)
        return value

    def get(self, name):
        if not name in self.values:
            self.values[name] = self.get_value(name)
        return self.values[name]

    def get_value(self, name):
        if name == 'status':
            return self.get_status()
        if name == 'name':
            return self.name
        value = None
        if value is None:
            value = self.get_arg_value(name)
        if value is None:
            value = self.get_cfg_value(name)
        if value is None:
            value = self.get_global_value(name)
        if value is None:
            value = DEFAULTS.get(name, None)
        if value is None:
            value = ''
        if isinstance(value, string_type):
            value = value.replace('\n', ' ').replace('\r', ' ')
            if name != 'namefmt': # Do not expand this format string.
                value = self.expand_string(value)
            if name in PATHNAMES:
                value = os.path.expanduser(value)
        return value

    def get_status(self):
        status = self.vars.get('status')
        if status is None:
            status = 'defined'
            self.vars.set('status', status)
        return status

    def get_arg_value(self, name):
        value = None
        if hasattr(self.args, 'option'):
            value = self.args.option.get(name, None)
        if value:
            options = self.vars.get('options') # saved cli options
            if options:
                value = options.get(name, None)
        return value

    def get_cfg_value(self, name):
        value = None
        try:
            value = self.config.get(self.name, name)
        except NoSectionError:
            die('Lab name not found in configuration.')
        except NoOptionError:
            pass
        return value

    def get_global_value(self, name):
        try:
            value = self.config.get('.global', name)
        except (NoSectionError, NoOptionError):
            value = None
        return value

    def get_values(self):
        values = {}
        values['name'] = self.name
        values['verbose'] = 'yes' if VERBOSE else 'no'
        for name in DEFAULTS:
            value = DEFAULTS[name]
            values[name] = value if value else ''
        if self.config.has_section('.global'):
            for name, value in self.config.items('.global'):
                values[name] = value
        if self.config.has_section(self.name):
            for name, value in self.config.items(self.name):
                values[name] = value
        options = self.vars.get('options') # saved cli options
        if options:
            for name in options:
                values[name] = options[name]
        if hasattr(self.args, 'option'):
            for name in self.args.option:
                values[name] = self.args.option[name]
        return values

    def expand_string(self, value):
        formatter = Formatter(self)
        value = formatter.format(value)
        return value

    def inventory(self):
        """Generate an ansible dynamic inventory for this lab."""

        inventory = {}

        # Get a list of guest hostnames by guest number.
        guests = {} # key: guest number 1 to n, value: guest hostname
        for guest in self.guests():
            guests[guest.number] = guest.hostname

        # Convert the group host number ranges to lists of hostnames.
        groups = {}     # key: group name, value: list of guest hostnames
        grouped = set() # any hosts not grouped will be placed in the ungrouped list
        for name, value in self.get_values().items():
            if not name.startswith('group.'):
                continue # skip regular options
            name = name.replace('group.', '', 1)
            if name in ('all', 'ungrouped'):
                raise ValueError('Unable to use reserved group name "%s"' % (name))
            if value == '*': # expand wildcard
                value = '1..%d' % len(guests)
            groups[name] = []
            for i in parse_sequence(value):
                if not i in guests:
                    raise ValueError(
                        'Guest number %d is out of range in option "%s".' % \
                        (i, 'group.'+name))
                groups[name].append(guests[i])
            grouped.update(groups[name])

        # Any left over go into the special "ungrouped" group.
        ungrouped = set(guests.values()) - grouped
        groups['ungrouped'] = list(ungrouped)

        # Set our host groups in the inventory, including "ungrouped".
        for name in groups:
            inventory[name] = {'hosts': groups[name]}

        # Set the group names as children of the special "all" group.
        inventory['all'] = {'children': list(groups.keys())}

        # Set our host vars.
        inventory['_meta'] = {'hostvars': {}}
        for guest in self.guests():
            hostname = guest.hostname
            inventory['_meta']['hostvars'][hostname] = {}
            for name, value in guest.get_values().items():
                if not name.startswith('var.'):
                    continue # skip regular options
                name = name.replace('var.', '', 1)
                inventory['_meta']['hostvars'][hostname][name] = value
            #if guest.ip:
            #    inventory['_meta']['hostvars'][hostname]['ansible_host'] = guest.ip

        return inventory

class Guest(object):

    def __init__(self, lab, number):
        self.dominfo = None
        self.lab = lab
        self.number = number
        name = self.get_cfg_value('name')
        if name is None:
            name = lab.namefmt.format(lab=lab.name, guest=number)
        self.name = name
        self.vars = Variables(os.path.join(self.vardir, 'guests', self.name + '.json'))

    def __getattr__(self, name):
        value = None
        if name == 'status':
            value = self.get_status()
            self.status = value
        if name == 'mac':
            value = self.get_mac()
            self.mac = value
        if name == 'ip':
            value = self.get_ip_addr()
            self.ip = value
        if name == 'hostname':
            value = '%s.%s' % (self.name, self.domain)
            self.hostname = value
        if value is None:
            value = self.get_cfg_value(name)
        if value is None:
            value = self.lab.get(name)
        if isinstance(value, string_type):
            value = value.replace('\n', ' ').replace('\r', ' ')
            if name != 'namefmt': # Do not expand this format string.
                value = self.lab.expand_string(value)
            if name in PATHNAMES:
                value = os.path.expanduser(value)
        trace('%s: %12s = %s' % (self.name, name, value))
        return value

    def get_status(self):
        lab = self.vars.get('lab')
        dominfo = self.domain_info()
        if dominfo and lab == self.lab.name:
            status = dominfo['State']
        else:
            status = ''
        return status

    def get_mac(self):
        if self.domain_exists():
            mac = self.domain_mac_addr()
        else:
            mac = self.vars.get('mac')
        return mac

    def get_ip_addr(self):
        lab = self.vars.get('lab')
        if lab == self.lab.name:
            ip = self.domain_ip_addr()
        else:
            ip = ''
        return ip

    def get_cfg_value(self, name):
        try:
            section = '%s.%d' % (self.lab.name, self.number)
            value = self.lab.config.get(section, name)
        except (NoSectionError, NoOptionError):
            value = None
        return value

    def get_values(self):
        section = '%s.%d' % (self.lab.name, self.number)
        values = self.lab.get_values()
        if self.lab.config.has_section(section):
            for name, value in self.lab.config.items(section):
                values[name] = value
        return values

    def create(self):
        if self.domain_exists():
            lab = self.vars.get('lab')
            if lab and lab != self.lab.name:
                warn('Skipping %s: domain already exists for lab %s.' % (self.name, lab))
            else:
                warn('Skipping %s: domain already exists.' % self.name)
            return

        def flag(switch, value):
            if value:
                args.append(switch)

        def opt(switch, value):
            if value:
                args.append(switch)
                args.append(value)

        args = ['kvm-install-vm', 'create']
        flag('-v', VERBOSE)
        flag('-a', self.autostart)
        opt('-b', self.bridge)
        opt('-c', self.cpus)
        opt('-d', self.disksize)
        opt('-D', self.domain)
        opt('-f', self.feature)
        opt('-g', self.graphics)
        opt('-i', self.image)
        opt('-k', self.key)
        opt('-l', self.imagedir)
        opt('-L', self.vmdir)
        opt('-m', self.memory)
        opt('-M', self.mac)
        opt('-p', self.port)
        opt('-s', self.scriptname)
        opt('-t', self.distro)
        opt('-T', self.timezone)
        opt('-u', self.user)
        args.append(self.name)

        info('creating guest %s' % self.name)
        rc = run(args)
        if rc != 0:
            die('Failed to create guest %s' % (self.name))
        self.vars.set('lab', self.lab.name)
        self.vars.set('mac', self.domain_mac_addr())
        self.vars.set('ip', self.domain_ip_addr())

    def destroy(self, purge):
        lab = self.vars.get('lab')
        if lab and lab != self.lab.name:
            warn('Skipping %s: domain associated with lab %s.' % (self.name, lab))
            return
        info('destroying guest %s' % self.name)
        run(['kvm-install-vm', 'remove', self.name])
        self.vars.set('lab', None)
        if purge:
            self.vars.remove()

    def domain_info(self):
        if self.dominfo is None:
            dominfo = {}
            try:
                for line in virsh('dominfo', self.name).splitlines():
                    if not line:
                        continue
                    name, value = line.split(':', 1)
                    name = name.strip()
                    value = value.strip()
                    dominfo[name] = value
            except VirshError:
                return None
            self.dominfo = dominfo
        return self.dominfo

    def domain_exists(self):
        """Return True if domain exists."""
        return self.domain_info() is not None

    def domain_running(self):
        """Return True if domain is running."""
        return self.domain_exists() and self.domain_info()['State'] == 'running'

    def domain_start(self):
        if not self.domain_exists():
            error('Domain %s does not exist.' % self.name)
            return
        if self.domain_running():
            trace('Skipping start; domain %s is already running.' % self.name)
            return
        trace('Starting domain %s' % self.name)
        try:
            output = virsh('start', self.name)
            info(output.strip())
        except VirshError:
            error('Failed to start %s' % self.name)

    def domain_stop(self):
        if not self.domain_exists():
            trace('Skipping stop; domain %s does not exist' % self.name)
            return
        if not self.domain_running():
            trace('Skipping stop; domain %s is not running' % self.name)
            return
        trace('Stopping domain %s' % self.name)
        try:
            output = virsh('shutdown', self.name)
            info(output.strip())
        except VirshError:
            error('Failed to stop %s' % self.name)

    def domain_mac_addr(self):
        """Return the first mac address in the domain definition, if one."""
        try:
            text = virsh('dumpxml', self.name)
            for line in text.splitlines():
                m = re.search(r"<mac address='([0-9a-fA-F:]+)'/>", line)
                if m:
                    mac = m.group(1)
                    trace('guest %s has mac %s' % (self.name, mac))
                    return m.group(1)
        except VirshError:
            pass
        trace('guest %s: mac not found' % self.name)
        return None

    def domain_ip_addr(self):
        """Attempt to find the ip address of this guest."""
        # We peak into the libvirt file to find the ip address instead
        # of using domifaddr, which is not ideal, but kvm_install_vm already
        # retried until the ip address was written to the libvirt dnsmasq file.
        if not self.bridge:
            trace('guest %s: ip not found; bridge name not defined.' % self.name)
            return None
        filename = '/var/lib/libvirt/dnsmasq/%s.status' % self.bridge
        if not os.path.exists(filename):
            trace('guest %s: ip not found; no bridge status file.' % self.name)
            return None
        with open('/var/lib/libvirt/dnsmasq/%s.status' % (self.bridge)) as f:
            status = json.load(f)
        for s in status:
            if s['mac-address'] == self.mac:
                ip = s['ip-address']
                trace('guest %s has ip %s' % (self.name, ip))
                return ip
        trace('guest %s: ip not found in file %s' % (self.name, filename))
        return None

class VirtLab(object):

    def __init__(self):
        self._command = ''
        self._config = ConfigParser()
        self._args = argparse.Namespace(
            verbose=False,
            dryrun=False,
            purge=False,
            config=None)
        # Subcommand aliases.
        self.new = self.create
        self.rm = self.destroy
        self.show = self.info
        self.ls = self.list

    def _progname(self):
        """Subcommand program name."""
        return "%s %s" % (os.path.basename(sys.argv[0]), self._command)

    def _parse_args(self, parser):
        """Parse subcommand arguments."""
        global VERBOSE
        global DRYRUN
        args = parser.parse_args(sys.argv[2:], self._args)
        VERBOSE = args.verbose
        DRYRUN = args.dryrun
        if hasattr(args, 'option'):
            args.option = dict(flatten(args.option))
        self._args = args

    def _read_config(self):
        """Read the config files

        Read the config files in the ~/.virt-lab directory. The path can be
        overridden by setting VIRTLAB_CONFDIR env variable. The configuration
        can be in serveral files to make it easier to share and merge configuration.
        """
        confdir = os.path.expanduser(os.environ.get('VIRTLAB_CONFDIR', '~/.virt-lab'))
        if not os.path.isdir(confdir):
            warn('Missing configuration directory "{0}".'.format(confdir))
        else:
            self._config.read(glob.glob(os.path.join(confdir, '*.cfg')))

    def _unknown(self):
        die('Unknown command: %s' % sys.argv[1])

    def help(self):
        """Print usage string."""
        print('usage:', USAGE)
        print(DESC)

    def version(self):
        """Print version string."""
        print('virt-lab', VERSION)

    def create(self):
        """Create the virtual lab guests."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.create.__doc__)
        parser.add_argument('name')
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-n', '--dryrun', action='store_true')
        parser.add_argument('-o', '--option', nargs='*', action='append',
                            metavar='<name>=<value>', default=[], type=option_arg)
        self._parse_args(parser)
        self._read_config()

        lab = Lab(self._args.name, self._args, self._config)
        lab.vars.set('options', self._args.option)
        for guest in lab.guests():
            guest.create()
        if lab.postcreate:
            lab.setenv()
            rc = run(lab.postcreate)
            if rc != 0:
                error('post-create command failed: %s; rc=%d' % (lab.postcreate, rc))
        lab.vars.set('status', 'active')

        # Update our global list of labs.
        v = Variables(os.path.join(VIRTDIR, 'vars', 'virtlab.json'))
        labs = set(v.get('labs', default=[]))
        labs.add(lab.name)
        v.set('labs', list(labs))

    def destroy(self):
        """Destroy the virtual lab guests."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.destroy.__doc__)
        parser.add_argument('name')
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-n', '--dryrun', action='store_true')
        parser.add_argument('--purge', action='store_true')
        self._parse_args(parser)
        self._read_config()

        lab = Lab(self._args.name, self._args, self._config)
        for guest in lab.guests():
            guest.destroy(self._args.purge)
        if lab.postdestroy:
            lab.setenv()
            rc = run(lab.postdestroy)
            if rc != 0:
                die('post-destroy command failed: %s; rc=%d' % (lab.postdestroy, rc))
        lab.vars.set('status', 'defined')

        # Update our global list of labs.
        v = Variables(os.path.join(VIRTDIR, 'vars', 'virtlab.json'))
        labs = set(v.get('labs', default=[]))
        labs.discard(lab.name)
        v.set('labs', list(labs))

    def start(self):
        """Start the virtual lab guests."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.start.__doc__)
        parser.add_argument('name')
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-n', '--dryrun', action='store_true')
        self._parse_args(parser)
        self._read_config()

        lab = Lab(self._args.name, self._args, self._config)
        for guest in lab.guests():
            guest.domain_start()
        if lab.poststart:
            lab.setenv()
            rc = run(lab.poststart)
            if rc != 0:
                error('poststart command failed: %s; rc=%d' % (lab.poststart, rc))
        lab.vars.set('status', 'active')

    def stop(self):
        """Stop the virtual lab guests."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.stop.__doc__)
        parser.add_argument('name')
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-n', '--dryrun', action='store_true')
        self._parse_args(parser)
        self._read_config()

        lab = Lab(self._args.name, self._args, self._config)
        for guest in lab.guests():
            guest.domain_stop()
        if lab.poststop:
            lab.setenv()
            rc = run(lab.poststop)
            if rc != 0:
                error('poststop command failed: %s; rc=%d' % (lab.poststop, rc))
        lab.vars.set('status', 'stopped')

    def info(self):
        """Show virtual lab and guest info."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.list.__doc__)
        parser.add_argument('name')
        self._parse_args(parser)
        self._read_config()

        out = sys.stdout
        lab = Lab(self._args.name, self._args, self._config)
        out.write('name: %s\n' % lab.name)
        out.write('status: %s\n' % lab.status)
        if lab.desc:
            out.write('desc: %s\n' % lab.desc)
        out.write('guests:\n')
        for guest in lab.guests():
            out.write('  - {name:%s' % guest.name)
            out.write(', hostname:%s.%s' % (guest.name, guest.domain))
            if guest.status:
                out.write(', status:%s' % guest.status)
            if guest.distro:
                out.write(', distro:%s' % guest.distro)
            if guest.ip:
                out.write(', ip:%s' % guest.ip)
            out.write('}\n')

    def list(self):
        """List virtual labs."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.list.__doc__)
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-b', '--brief', action='store_true')
        parser.add_argument('-a', '--active', action='store_true')
        parser.add_argument('--no-heading', action='store_true')
        self._parse_args(parser)
        self._read_config()

        def escape(s):
            if s is None:
                s = ''
            return s

        heading = not self._args.no_heading
        brief = self._args.brief

        seen = dict()
        for section in self._config.sections():
            if '.' in section:
                continue # skip subsections
            name = section
            lab = Lab(name, self._args, self._config)
            if self._args.active and lab.status != 'active':
                continue # skip inactive when --active is given
            if not lab.name in seen:
                seen[lab.name] = (lab.status, lab.desc)

        # Labs from other configs!
        v = Variables(os.path.join(VIRTDIR, 'vars', 'virtlab.json'))
        labs = set(v.get('labs', default=[]))
        for name in labs:
            if not name in seen:
                seen[name] = ('active', '')

        if seen and heading:
            if brief:
                print('name')
                print('----')
            else:
                sep = '-' * 12
                print('%-12s %-12s %s' % ('name', 'status', 'description'))
                print('%-12s %-12s %s' % (sep, sep, sep))

        for name in sorted(seen.keys()):
            if brief:
                print(name)
            else:
                status, desc = seen[name]
                print('%-12s %-12s %s' % (name, status, escape(desc)))

    def inventory(self):
        """Ansible dynamic inventory."""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=self.list.__doc__)
        parser.add_argument('name')
        self._parse_args(parser)
        self._read_config()

        lab = Lab(self._args.name, self._args, self._config)
        json.dump(lab.inventory(), sys.stdout)

    def main(self):
        """Main return for virt-lab"""
        parser = argparse.ArgumentParser(
            prog=self._progname(),
            description=DESC,
            usage=USAGE)
        parser.add_argument('command', help='subcommand to run')
        args = parser.parse_args(sys.argv[1:2], self._args)
        self._command = args.command
        if self._command.startswith('_'):
            self._command = '_unknown'
        getattr(self, self._command, self._unknown)()


if __name__ == '__main__':
    VirtLab().main()
